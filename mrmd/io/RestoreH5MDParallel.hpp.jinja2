#pragma once

#include <memory>
#include <string>

#include "cmake.hpp"
#include "data/Atoms.hpp"
#include "data/MPIInfo.hpp"
#include "data/Subdomain.hpp"
#include "hdf5.hpp"

namespace mrmd::io
{

class RestoreH5MDParallel
{
public:
    RestoreH5MDParallel(const std::shared_ptr<data::MPIInfo>& mpiInfo,
                        const std::string& particleGroupName = "atoms")
        : mpiInfo_(mpiInfo),
          particleGroupName_(particleGroupName)
    {
    }

    void restore(const std::string& filename, data::Subdomain& subdomain, data::Atoms& atoms);

    {% for prop in particle %}
    bool restore{{prop.name | cap_first}} = {{prop.default}};
    {%- endfor %}

    {% for prop in particle %}
    std::string {{prop.name}}Dataset = "{{prop.dataset}}";
    {%- endfor %}

private:
    template <typename T>
    void readParallel(hid_t fileId,
                      const std::string& dataset,
                      std::vector<T>& data);

    std::shared_ptr<data::MPIInfo> mpiInfo_;
    std::string particleGroupName_;
};

}  // namespace mrmd::io